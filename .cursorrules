# GourdBoat 项目 Cursor Rules

## 项目概述
GourdBoat 是一个支持多OIDC服务商的认证系统，采用分层架构设计，支持动态扩展新的认证服务商。

## 架构设计原则

### 1. 分层架构
- **Domain层**: 核心业务逻辑和领域模型
- **Application层**: 应用服务，协调领域对象
- **Infrastructure层**: 技术实现，包括持久化、外部服务集成
- **Interfaces层**: 对外接口，包括REST API

### 2. OIDC服务商设计
- 使用字符串类型而非枚举，支持动态扩展
- 采用策略模式实现不同服务商的认证逻辑
- 支持多实例配置（同一服务商可以有多个配置）

### 3. 数据库设计原则
- 使用逻辑外键而非物理外键，提高性能和灵活性
- 表名使用 `boat_` 前缀
- 支持多租户和多实例配置

## 代码规范

### 1. 命名规范
- 类名：PascalCase
- 方法名：camelCase
- 常量：UPPER_SNAKE_CASE
- 包名：全小写，点分隔

### 2. 文件组织
- 按功能模块组织包结构
- 每个模块包含：domain、application、infrastructure、interfaces
- 测试文件放在对应的test目录下

### 3. 数据库表设计
数据库表结构定义在以下文件中：
- **开发环境**: `db/schema/schema-postgresql.sql` (PostgreSQL)
- **测试环境**: `db/schema/schema.sql` (H2兼容)
- **生产环境**: `db/schema/schema-postgresql.sql` (PostgreSQL)
- **测试数据**: `modules/bootstrap/src/test/resources/data.sql`
- **开发数据**: `modules/bootstrap/src/main/resources/data-dev.sql`

主要表结构包括：
- `boat_account`: 账号表
- `boat_oidc_provider_registry`: OIDC服务商注册表
- `boat_oidc_config`: OIDC配置表

## 开发最佳实践

### 1. 开发环境设置
- **环境设置脚本**: `./scripts/setup-dev-env.sh` 生成JWT密钥和环境配置
- **PostgreSQL设置**: `./scripts/setup-postgresql-dev.sh` (Docker方式) 或 `./scripts/setup-postgresql-dev-simple.sh` (本地安装)
- **数据库配置**: 开发环境使用PostgreSQL (端口55000)，测试环境使用H2内存数据库
- **配置文件**: 使用 `.env.local` 存储敏感配置（不提交到版本控制）

### 2. 新增OIDC服务商
1. 在 `AuthProvider` 中添加服务商常量
2. 实现对应的策略类（继承 `OidcProviderStrategy`）
3. 在 `DynamicOidcStrategyFactory` 中注册策略
4. 添加数据库配置记录

### 3. 测试规范
- 集成测试使用H2内存数据库
- 测试数据通过 `data.sql` 初始化
- 测试配置使用 `application-test.yml`

### 4. 配置管理
- 开发环境：`application-dev.yml` (PostgreSQL)
- 测试环境：`application-test.yml` (H2)
- 生产环境：`application.yml` (PostgreSQL)

## 安全架构

### 1. 敏感信息加密
- **加密服务**: `EncryptionService` 使用AES加密敏感信息
- **自动加密**: `EncryptedStringConverter` 自动加密/解密数据库字段
- **配置密钥**: 通过 `app.encryption.key` 配置加密密钥
- **加密字段**: `client_secret` 等敏感字段自动加密存储

### 2. 错误处理机制
- **错误码枚举**: `OidcErrorCode` 定义标准错误码
- **认证异常**: `OidcAuthenticationException` 统一异常处理
- **全局处理器**: `GlobalExceptionHandler` 统一异常响应
- **HTTP状态码**: 根据错误类型返回合适的状态码

### 3. 配置验证
- **验证器**: `OidcConfigValidator` 验证配置完整性和有效性
- **验证内容**: URL格式、端点安全性、Scope格式等
- **自动验证**: 在OIDC操作前自动验证配置

## 技术栈

### 核心框架
- Spring Boot 3.2.3
- Spring Security
- Spring Data JPA
- Hibernate

### 数据库
- **开发环境**: PostgreSQL (端口55000)
- **测试环境**: H2内存数据库
- **生产环境**: PostgreSQL

### 构建工具
- Gradle 8.13
- Java 21+

## 安全考虑

### 1. 密码处理
- 使用BCrypt加密存储密码
- 敏感配置信息加密存储

### 2. JWT Token
- 使用安全的密钥
- 设置合理的过期时间

### 3. OIDC安全
- 验证token签名
- 检查token过期时间
- 验证client_id和client_secret
- 自动加密敏感配置信息

### 4. 错误安全
- 不泄露敏感信息在错误消息中
- 统一的错误响应格式
- 详细的错误日志记录

## 性能优化

### 1. 数据库
- 使用逻辑外键避免物理外键约束
- 合理设置索引
- 使用连接池

### 2. 缓存策略
- 缓存OIDC配置信息
- 缓存用户信息

## 扩展性设计

### 1. 动态服务商注册
- 支持运行时注册新的OIDC服务商
- 支持多实例配置

### 2. 策略模式
- 每个服务商独立的认证策略
- 易于添加新的认证方式

### 3. 配置驱动
- 通过数据库配置管理服务商
- 支持动态启用/禁用服务商

## 监控和日志

### 1. 日志级别
- 开发环境：DEBUG
- 生产环境：INFO/WARN

### 2. 关键操作日志
- 用户登录/登出
- OIDC认证过程
- 配置变更
- 错误异常记录

### 3. 错误监控
- 详细的错误码和错误信息
- 服务商级别的错误统计
- 异常堆栈信息记录

## 部署考虑

### 1. 环境配置
- 使用环境变量管理敏感信息
- 支持Docker容器化部署
- 加密密钥通过环境变量配置

### 2. 健康检查
- 数据库连接检查
- OIDC服务商可用性检查

## 常见问题解决

### 1. 开发环境设置问题
- **PostgreSQL连接失败**: 检查Docker容器状态或本地PostgreSQL服务
- **网络问题**: 使用 `./scripts/setup-postgresql-dev-simple.sh` 进行本地安装
- **端口冲突**: 检查端口55000是否被占用，或使用默认端口5432
- **权限问题**: 确保脚本有执行权限 `chmod +x scripts/*.sh`

### 2. 测试失败
- 检查数据库schema是否正确
- 确认测试数据是否正确初始化
- 验证AuthProvider类型使用是否正确

### 3. OIDC认证失败
- 检查client_id和client_secret配置
- 验证回调URL配置
- 确认服务商状态是否正常
- 查看详细的错误码和错误信息

### 4. 数据库连接问题
- 检查数据库连接配置
- 确认数据库服务是否正常运行
- 验证数据库权限设置

### 5. 加密相关问题
- 确认加密密钥配置正确
- 检查加密字段是否正常解密
- 验证加密服务是否正常工作

### 6. 配置验证失败
- 检查URL格式是否正确
- 确认必填字段是否完整
- 验证Scope格式是否符合规范 